<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" docName="draft-dai-netconf-quic-netconf-over-quic-06" category="std" ipr="trust200902" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="false" tocInclude="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.21.0 -->
  <!-- Generated by id2xml 1.5.2 on 2024-04-14T13:15:22Z -->
	<front>
    <title>Using NETCONF over QUIC connection</title>
    <seriesInfo name="Internet-Draft" value="draft-dai-netconf-quic-netconf-over-quic-06"/>
    <author initials="J." surname="Dai" fullname="Jinyou Dai">
      <organization abbrev="CICT">China Information Communication Technologies Group.</organization>
      <address>
        <postal>
          <street>Gaoxin 4th Road 6#</street>
          <street>Wuhan, Hubei 430079</street>
          <street>China</street>
        </postal>
        <email>djy@fiberhome.com</email>
      </address>
    </author>
    <author initials="S." surname="Yu" fullname="Shaohua Yu">
      <organization abbrev="PCL">China PCL.</organization>
      <address/>
    </author>
    <author initials="W." surname="Cheng" fullname="Weiqiang Cheng">
      <organization abbrev="China Mobile">China Mobile.</organization>
      <address/>
    </author>
    <author initials="M." surname="Blanchet" fullname="Marc Blanchet">
      <organization abbrev="Viagenie">Vagenie</organization>
      <address>
        <postal>
          <street>Canada</street>
        </postal>
      </address>
    </author>
    <author initials="P." surname="Andersson" fullname="Per Andersson">
      <organization>Cisco systems</organization>
      <address>
        <postal>
          <street>Sweden<!--
   draft-dai-netconf-quic-netconf-over-quic-06.txt(474): Warning: This author is
   listed in the Authors' Addresses section, but was not found  on the first
   page: Xueshun Wang
   -->
            <!--
   draft-dai-netconf-quic-netconf-over-quic-06.txt(474): Warning: This author is
   listed in the Authors' Addresses section, but was not found  on the first
   page: Yang Kou
   -->
          </street>
        </postal>
      </address>
    </author>
    <date year="2024" month="April" day="10"/>
    <abstract>
      <t>
   The Network Configuration Protocol (NETCONF) provides mechanisms to
   install, manipulate, and delete the configuration of network devices.
   NETCONF can be carried over various transports such as TCP, SSH or else.
   QUIC provides useful semantics for Network management and NETCONF in
   particular a single connection can carry multiple requests over streams,
   enabling much better efficiency and performance for both peers. QUIC
   provides shorter handshake, includes TLS . QUIC is also more adaptable
   to more difficult environments such  as those with long delays. This
   document describes how to use NETCONF over the QUIC transport
   protocol, named NETCONFoQUIC.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="sect-1" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
   The Network Configuration Protocol (NETCONF) <xref target="RFC6241" format="default"/> defines a
   mechanism through which the configuration of network devices can be
   installed, manipulated, and deleted.</t>
      <t>
   NETCONF can be conceptually partitioned into four layers: Content
   layer, operation layer, message layer and security transport layer.</t>
      <t>
   The Secure Transport layer provides a communication path between the
   client and server.  NETCONF can be layered over any transport
   protocol that provides a set of basic requirements, the requirements
   include the following  aspects:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
(1). NETCONF is connection-oriented, requiring a persistent
connection   between peers.  This connection MUST provide reliable,
sequenced data   delivery.  NETCONF connections are long-lived,
persisting between   protocol operations.
]]></artwork>
      <dl newline="true" spacing="normal" indent="2">
        <dt>(2). NETCONF connections MUST provide authentication, data integrity,</dt>
        <dd>
	confidentiality, and replay protection.  NETCONF depends on the
	</dd>
        <dt>transport protocol for this capability.</dt>
        <dd/>
        <dt>So, the NETCONF protocol is not bound to any</dt>
        <dd>
          <t>
	particular transport
          </t>
          <t>
	protocol, but allows a mapping to define how it can be implemented
   over any specific protocol. At the present, there are a few secure
   transport protocols that can be used to carry NETCONF:
          </t>
        </dd>
      </dl>
      <t>
   (1).  <xref target="RFC6242" format="default"/> specifies how to use secure shell(SSH) as the secure
   transport layer of NETCONF.</t>
      <t>
   (2).  <xref target="RFC7589" format="default"/> specifies how to use transport layer security(TLS) as
   the secure transport layer of NETCONF.</t>
      <t>
   (3).  <xref target="RFC4743" format="default"/> specifies how to use simple object access
   protocol(SOAP)as the secure transport layer of NETCONF.</t>
      <t>
   (4).  <xref target="RFC4744" format="default"/> specifies how to use blocks extensible exchange
   protocol(BEEP) as the secure transport layer  of NETCONF.</t>
      <t>
   However, because of the connection-oriented feature, almost all of
   the current secure transport protocols used by NETCONF is TCP based.
   As is well known, TCP has some shortcomings such as head-of-line
   blocking.</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
QUIC (<xref target="RFC9000"/><xref target="RFC9001"/>) conforms
to the above requirements, therefore is also an appropriate transport
protocol for NETCONF. Moreover, QUIC provides the following additional
benefits not present in the other NETCONF transports:
- Single connection can be long lived and support multiple NETCONF RPC
 calls and responses within the same connection, using streams.
- 1 RTT initial handshake that includes TLS
- fully encrypted
- adaptable to more difficult environments such as those with long delays
(<xref target="I-D.many-deepspace-ip-assessment"/><xref target=
 "I-D.huitema-quic-in-space"/>)
]]></artwork>
      <t>
   It can be learned from the afore-mentioned information that QUIC is
   also a proper candidate transport protocol for the secure transport
   layer of NETCONF. In addition, QUIC can perfectly fix the shortcoming
   such as head of line blocking of TCP. This document specifies how to use
   QUIC as the secure transport protocol for Netconf.</t>
    </section>
    <section anchor="sect-2" numbered="true" toc="default">
      <name>Terminology and definitions</name>
      <t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
In this document, the terms "client" and "server" are used to   refer
to the two ends of the QUIC connection.  The client actively
initiates the QUIC connection. The terms "manager" and "agent" are
used to   refer to the two ends of the NETCONF protocol session.  The
manager  issues NETCONF remote procedure call (RPC) commands, and
the agent   replies to those commands. Generally, a "manager" is a
"client" meanwhile an "agent" is a "server".
]]></artwork>
      <dl newline="false" spacing="normal" indent="-1">
        <dt>Client:</dt>
        <dd>
          <t>
	The endpoint that initiates a QUIC connection.
          </t>
          <t/>
        </dd>
        <dt>Server:</dt>
        <dd>
          <t>
	The endpoint that accepts a QUIC connection.
          </t>
          <t/>
        </dd>
      </dl>
    </section>
    <section anchor="sect-3" numbered="true" toc="default">
      <name>Connection management</name>
      <section anchor="sect-3.1" numbered="true" toc="default">
        <name>Draft Version Identification</name>
        <dl newline="false" spacing="normal" indent="-6">
          <dt/>
          <dd>
            <t>         *RFC Editor's Note:* Please remove this section prior to</t>
            <dl newline="true" spacing="compact" indent="-1">
              <dt>publication of a final version of this document.</dt>
              <dd/>
              <dt>NETCONFoQUIC uses the token "NoQ" to identify itself in ALPN and Alt-</dt>
              <dd>
	Svc. Only implementations of the final, published RFC can identify
   themselves as "NoQ".  Until such an RFC exists, implementations MUST
    NOT identify themselves using this string.
	</dd>
              <dt>Implementations of draft versions of the protocol MUST add the string</dt>
              <dd>
	"-" and the corresponding draft number to the identifier.
	</dd>
            </dl>
          </dd>
        </dl>
      </section>
      <section anchor="sect-3.2" numbered="true" toc="default">
        <name>Connection setup</name>
        <t>
   3.2.1. Version negotiation</t>
        <t>
   QUIC versions are identified using a 32-bit unsigned number, and the
   version 0x00000000 is reserved to represent version negotiation.</t>
        <t>
   Version negotiation ensures that client and server agree to a QUIC
   version that is mutually supported.</t>
        <t>
   The process of version negotiation can be seen in [RFC 9000].</t>
        <t>
   3.2.2. Connection establishment</t>
        <t>
   QUIC connections are established as described in [RFC 9000]. During
   connection establishment, NETCONFoQUIC support is indicated by
   selecting the ALPN token "NoQ" in the crypto handshake.</t>
        <t>
   The peer acting as the NETCONF manager MUST also act as the client
   meanwhile the peer acting as the NETCONF agent must also act as the
   server.</t>
        <t>
   The manager should be the initiator of the QUIC connection to the
   agent meanwhile the agent act as a connection acceptor.</t>
      </section>
      <section anchor="sect-3.3" numbered="true" toc="default">
        <name>Connection Closure</name>
        <t>
   3.3.1. QUIC connection termination process</t>
        <dl newline="false" spacing="normal" indent="-1">
          <dt/>
          <dd>
            <t>   The typical QUIC connection termination process can be seen in</t>
            <dl newline="true" spacing="compact" indent="-1">
              <dt>[RFC9000]</dt>
              <dd/>
            </dl>
          </dd>
        </dl>
        <artwork name="" type="" align="left" alt=""><![CDATA[
3.3.2. NETCONFoQUIC consideration for connection termination
]]></artwork>
        <t>
   When a NETCONF session is implemented based on a QUIC connection, the
   idle timeout should be disabled or the QUIC max_idle_timeout should be set
   appropriately in order to keep the QUIC connection persistent even if the
   NETCONF session is idle.</t>
        <dl newline="true" spacing="normal" indent="1">
          <dt>When a NETCONF server receives a &lt;close-session&gt; request, it will</dt>
          <dd>
	gracefully close the NETCONF session.  The server is recommended to close
    the associated QUIC connection.
	</dd>
        </dl>
        <t>
   When a NETCONF entity receives a &lt;kill-session&gt; request for an
   open session, it is recommended to close the associated QUIC connection.</t>
        <dl newline="false" spacing="normal" indent="58">
          <dt>When a NETCONF entity is going to detect the interuption</dt>
          <dd>
            <t>
	of QUIC connections,
            </t>
            <t>
	it should send a &lt;close-session&gt; request to the peer NETCONF entity.
            </t>
          </dd>
        </dl>
        <t>
   When a stateless reset event occurs, nothing needs to be done by
   either the manager or the agent.</t>
      </section>
    </section>
    <section anchor="sect-4" numbered="true" toc="default">
      <name>Stream mapping and usage</name>
      <t>
   <xref target="RFC6241" format="default"/> specifies protocol layers of NETCONF, the protocol layers
   structure can also be seen from figure 1 of this document, it is
   noted that this figure is just a citation from <xref target="RFC6241" format="default"/>.</t>
      <figure anchor="ure-netconf-protocol-layers">
        <name>NETCONF Protocol Layers</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
Layer                 Example
       +-------------+      +-----------------+      +----------------+
   (4) |   Content   |      |  Configuration  |      |  Notification  |
       |             |      |      data       |      |      data      |
       +-------------+      +-----------------+      +----------------+
              |                       |                      |
       +-------------+      +-----------------+              |
   (3) | Operations  |      |  <edit-config>  |              |
       |             |      |                 |              |
       +-------------+      +-----------------+              |
              |                       |                      |
       +-------------+      +-----------------+      +----------------+
   (2) |  Messages   |      |     <rpc>,      |      | <notification> |
       |             |      |   <rpc-reply>   |      |                |
       +-------------+      +-----------------+      +----------------+
              |                       |                      |
       +-------------+      +-----------------------------------------+
   (1) |   Secure    |      |  SSH, TLS, BEEP/TLS, SOAP/HTTP/TLS, ... |
       |  Transport  |      |                                         |
       +-------------+      +-----------------------------------------+
]]></artwork>
      </figure>
      <t>
   It can be learned from figure 1 that there are two kinds of main data
   flow exchanged between manager and agent:</t>
      <t>
   (1) Configuration data from manager to agent.</t>
      <t>
   (2) Notification data from agent to manager.</t>
      <t>
   The two kinds of data flow need to be mapped into QUIC streams.</t>
      <t>
   QUIC Streams provide a lightweight, ordered byte-stream abstraction
   to an application. Streams can be unidirectional or bidirectional
   meanwhile streams can be initiated by either the client or the
   server. Unidirectional    streams carry data in one direction: from
   the initiator  of the stream to its peer.  Bidirectional streams
   allow for data to be sent in both directions.</t>
      <t>
   QUIC uses Stream ID to identify the stream. The least significant bit
   (0x1) of the stream ID identifies the initiator of the stream. The
   second least significant bit (0x2) of the stream ID distinguishes
   between bidirectional streams (with the bit set to 0) and
   unidirectional streams. Table 1 describes the four types of streams
   and this table can also be seen from [RFC 9000].</t>
      <table anchor="tab-stream-id-types" align="center">
        <name>Stream ID Types</name>
        <thead>
          <tr>
            <th align="left"> Bits</th>
            <th align="left"> Stream Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">0x0</td>
            <td align="left">Client-Initiated, Bidirectional</td>
          </tr>
          <tr>
            <td align="left">0x1</td>
            <td align="left">Server-Initiated, Bidirectional</td>
          </tr>
          <tr>
            <td align="left">0x2</td>
            <td align="left">Client-Initiated, Unidirectional</td>
          </tr>
          <tr>
            <td align="left">0x3</td>
            <td align="left">Server-Initiated, Unidirectional</td>
          </tr>
        </tbody>
      </table>
      <section anchor="sect-4.1" numbered="true" toc="default">
        <name>Bidirectional stream between manager and agent</name>
        <dl newline="false" spacing="normal" indent="5">
          <dt>The</dt>
          <dd>
            <t>
	NETCONF protocol uses an RPC-based communication model. So, the
            </t>
            <t>
	configuration data from manager to agent is exchanged based on
   '&lt;RPC&gt;' (the manager initiating) and '&lt;RPC-Reply&gt;' (sent by the
   agent) and so on. So the messages used to exchange configuration data
   should be mapped into one or more bidirectional stream whose stream
   type is 0 according to the above table.
            </t>
          </dd>
        </dl>
      </section>
      <section anchor="sect-4.2" numbered="true" toc="default">
        <name>Unidirectional stream from agent to manager</name>
        <t>
   There are some notification data exchanged between the agent and the
   manager.  Notification is a server-initiated message indicating that
   a certain event has been recognized by the server.</t>
        <t>
   Notification messages are initiated by the agent and no reply is
   needed from the manager. So the messages used to exchange
   configuration data should be mapped into one unidirectional stream
   whose stream type is 3 according to the above table.</t>
      </section>
    </section>
    <section anchor="sect-5" numbered="true" toc="default">
      <name>Endpoint Authentication</name>
      <section anchor="sect-5.1" numbered="true" toc="default">
        <name>using QUIC handshake authentication</name>
        <t>
   NETCONFoQUIC should use the QUIC versions that uses TLS version
   1.3 or greater. Then, the TLS handshake process can be used for
   endpoint authentication.</t>
      </section>
      <section anchor="sect-5.2" numbered="true" toc="default">
        <name>using third-party authentication</name>
        <t>
   A third-party authentication mechanism can also be used for
   NETCONFoQUIC endpoint authentication. for example, a  TLS client
   certificates can be used.</t>
      </section>
    </section>
    <section anchor="sect-6" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
   The security considerations described throughout <xref target="RFC5246" format="default"/> and
   <xref target="RFC6241" format="default"/> apply here as well.</t>
      <dl newline="true" spacing="normal" indent="1">
        <dt>This document in its current version does not require to support</dt>
        <dd>
	third-party authentication (e.g., backend Authentication, Authorization,
   and  Accounting (AAA) servers) due to the fact that TLS does not specify
   this way of authentication and that NETCONF depends on the transport
    protocol for the authentication service.
    If third-party authentication is needed, TLS client certificates, BEEP or
    SSH transport can be used.
	</dd>
        <dt>Especially TLS client certificates are recommended to be used here.</dt>
        <dd>
          <dl newline="true" spacing="compact" indent="-1">
            <dt>An attacker might be able to inject arbitrary NETCONF messages via</dt>
            <dd>
	some application that does not carefully check exchanged messages
	</dd>
          </dl>
        </dd>
        <dt>or</dt>
        <dd>
          <t>
	deliberately insert the delimiter sequence in a NETCONF message
          </t>
          <t>
	to   create a DoS attack.  Hence, applications and NETCONF APIs MUST
    ensure that the delimiter sequence defined in Section 2.1 never
          </t>
        </dd>
        <dt>appears in NETCONF messages; otherwise, those messages can be</dt>
        <dd>
          <t>
	dropped, garbled, or misinterpreted.
          </t>
          <dl newline="true" spacing="compact" indent="1">
            <dt>If invalid data or malformed messages are encountered, a robust</dt>
            <dd>
	implementation of this document must silently discard the message
	</dd>
          </dl>
        </dd>
        <dt>without further processing and then stop the NETCONF session.</dt>
        <dd>
          <dl newline="true" spacing="compact" indent="-1">
            <dt>Finally, this document does not introduce any new security</dt>
            <dd/>
          </dl>
        </dd>
        <dt>considerations compared to [RFC6242].</dt>
        <dd/>
      </dl>
    </section>
    <section anchor="sect-7" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <dl newline="false" spacing="normal" indent="-1">
        <dt/>
        <dd>
          <t>    This document creates a new registration for the identification of</t>
          <dl newline="true" spacing="compact" indent="3">
            <dt>NETCONFoQUIC in the "Application Layer Protocol Negotiation (ALPN)</dt>
            <dd>
              <t>
	Protocol   IDs" registry established in [RFC7301]. </t>
              <t>
	The "noq" string identifies NETCONFoQUIC:
              </t>
              <dl newline="false" spacing="normal" indent="-1">
                <dt>Protocol:</dt>
                <dd>
                  <t>
	NETCONFoQUIC
                  </t>
                  <t/>
                </dd>
                <dt>Identification Sequence:</dt>
                <dd>
                  <t>
	0x4e 0x6f 0x51 ("NoQ")
                  </t>
                  <t/>
                </dd>
                <dt>Specification:</dt>
                <dd>
                  <t>
	This document
                  </t>
                  <t/>
                </dd>
              </dl>
            </dd>
          </dl>
        </dd>
      </dl>
      <t>
   In addition, it is requested for IANA to reserve a UDP port TBD for
   'NETCONF over QUIC'.</t>
    </section>
    <section anchor="sect-8" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>
   The authors would like to acknowledge all contributors including
   Huaimo Chen, Lifen Zhou et al. for their beneficial comments.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml">
          <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <date month="May" year="2021"/>
            <abstract>
              <t>This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9000"/>
          <seriesInfo name="DOI" value="10.17487/RFC9000"/>
        </reference>
        <reference anchor="RFC9001" target="https://www.rfc-editor.org/info/rfc9001" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9001.xml">
          <front>
            <title>Using TLS to Secure QUIC</title>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <author fullname="S. Turner" initials="S." role="editor" surname="Turner"/>
            <date month="May" year="2021"/>
            <abstract>
              <t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9001"/>
          <seriesInfo name="DOI" value="10.17487/RFC9001"/>
        </reference>
        <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml">
          <front>
            <title>Network Configuration Protocol (NETCONF)</title>
            <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
            <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
            <date month="June" year="2011"/>
            <abstract>
              <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6241"/>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
        </reference>
        <reference anchor="RFC5246" target="https://www.rfc-editor.org/info/rfc5246" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
            <author fullname="T. Dierks" initials="T." surname="Dierks"/>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2008"/>
            <abstract>
              <t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5246"/>
          <seriesInfo name="DOI" value="10.17487/RFC5246"/>
        </reference>
        <reference anchor="RFC6242" target="https://www.rfc-editor.org/info/rfc6242" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml">
          <front>
            <title>Using the NETCONF Protocol over Secure Shell (SSH)</title>
            <author fullname="M. Wasserman" initials="M." surname="Wasserman"/>
            <date month="June" year="2011"/>
            <abstract>
              <t>This document describes a method for invoking and running the Network Configuration Protocol (NETCONF) within a Secure Shell (SSH) session as an SSH subsystem. This document obsoletes RFC 4742. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6242"/>
          <seriesInfo name="DOI" value="10.17487/RFC6242"/>
        </reference>
        <reference anchor="RFC7589" target="https://www.rfc-editor.org/info/rfc7589" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7589.xml">
          <front>
            <title>Using the NETCONF Protocol over Transport Layer Security (TLS) with Mutual X.509 Authentication</title>
            <author fullname="M. Badra" initials="M." surname="Badra"/>
            <author fullname="A. Luchuk" initials="A." surname="Luchuk"/>
            <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
            <date month="June" year="2015"/>
            <abstract>
              <t>The Network Configuration Protocol (NETCONF) provides mechanisms to install, manipulate, and delete the configuration of network devices. This document describes how to use the Transport Layer Security (TLS) protocol with mutual X.509 authentication to secure the exchange of NETCONF messages. This revision of RFC 5539 documents the new message framing used by NETCONF 1.1 and it obsoletes RFC 5539.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7589"/>
          <seriesInfo name="DOI" value="10.17487/RFC7589"/>
        </reference>
        <reference anchor="RFC4743" target="https://www.rfc-editor.org/info/rfc4743" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4743.xml">
          <front>
            <title>Using NETCONF over the Simple Object Access Protocol (SOAP)</title>
            <author fullname="T. Goddard" initials="T." surname="Goddard"/>
            <date month="December" year="2006"/>
            <abstract>
              <t>The Network Configuration Protocol (NETCONF) is applicable to a wide range of devices in a variety of environments. Web Services is one such environment and is presently characterized by the use of the Simple Object Access Protocol (SOAP). NETCONF finds many benefits in this environment: from the reuse of existing standards, to ease of software development, to integration with deployed systems. Herein, we describe SOAP over HTTP and SOAP over Blocks Exchange Extensible Protocol (BEEP) bindings for NETCONF. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4743"/>
          <seriesInfo name="DOI" value="10.17487/RFC4743"/>
        </reference>
        <reference anchor="RFC4744" target="https://www.rfc-editor.org/info/rfc4744" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4744.xml">
          <front>
            <title>Using the NETCONF Protocol over the Blocks Extensible Exchange Protocol (BEEP)</title>
            <author fullname="E. Lear" initials="E." surname="Lear"/>
            <author fullname="K. Crozier" initials="K." surname="Crozier"/>
            <date month="December" year="2006"/>
            <abstract>
              <t>This document specifies an application protocol mapping for the Network Configuration Protocol (NETCONF) over the Blocks Extensible Exchange Protocol (BEEP). [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4744"/>
          <seriesInfo name="DOI" value="10.17487/RFC4744"/>
        </reference>
        <reference anchor="RFC9114" target="https://www.rfc-editor.org/info/rfc9114" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9114.xml">
          <front>
            <title>HTTP/3</title>
            <author fullname="M. Bishop" initials="M." role="editor" surname="Bishop"/>
            <date month="June" year="2022"/>
            <abstract>
              <t>The QUIC transport protocol has several features that are desirable in a transport for HTTP, such as stream multiplexing, per-stream flow control, and low-latency connection establishment. This document describes a mapping of HTTP semantics over QUIC. This document also identifies HTTP/2 features that are subsumed by QUIC and describes how HTTP/2 extensions can be ported to HTTP/3.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9114"/>
          <seriesInfo name="DOI" value="10.17487/RFC9114"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC6101" target="https://www.rfc-editor.org/info/rfc6101" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6101.xml">
          <front>
            <title>The Secure Sockets Layer (SSL) Protocol Version 3.0</title>
            <author fullname="A. Freier" initials="A." surname="Freier"/>
            <author fullname="P. Karlton" initials="P." surname="Karlton"/>
            <author fullname="P. Kocher" initials="P." surname="Kocher"/>
            <date month="August" year="2011"/>
            <abstract>
              <t>This document is published as a historical record of the SSL 3.0 protocol. The original Abstract follows.</t>
              <t>This document specifies version 3.0 of the Secure Sockets Layer (SSL 3.0) protocol, a security protocol that provides communications privacy over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. This document defines a Historic Document for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6101"/>
          <seriesInfo name="DOI" value="10.17487/RFC6101"/>
        </reference>
        <reference anchor="RFC3080" target="https://www.rfc-editor.org/info/rfc3080" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3080.xml">
          <front>
            <title>The Blocks Extensible Exchange Protocol Core</title>
            <author fullname="M. Rose" initials="M." surname="Rose"/>
            <date month="March" year="2001"/>
            <abstract>
              <t>This memo describes a generic application protocol kernel for connection-oriented, asynchronous interactions called the BEEP (Blocks Extensible Exchange Protocol) core. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3080"/>
          <seriesInfo name="DOI" value="10.17487/RFC3080"/>
        </reference>
      </references>
    </references>
  </back>
</rfc>
